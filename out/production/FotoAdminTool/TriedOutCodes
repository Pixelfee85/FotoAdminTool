  public void readAndDisplayMetadata(){
        try {
            //here file stands for one single image. instead you can save a directory as a File object and iis will safe all fotos in here
            ImageInputStream iis = ImageIO.createImageInputStream(file);
            Iterator<ImageReader> readers = ImageIO.getImageReaders(iis);

            if(readers.hasNext()){
                //pick the first available reader
                ImageReader reader = readers.next();

                //attach sourche to the reader
                reader.setInput(iis, true);

                //read metadata from first image
                IIOMetadata metadata = reader.getImageMetadata(0);

                String[] names = metadata.getMetadataFormatNames();
                for (int i = 0; i < names.length; i++){
                    System.out.println("Format name: "+names[i]);
                    displayMetadata(metadata.getAsTree(names[i]));
                }
            }

        } catch (Exception e){
            e.printStackTrace();
        }
    }

    //versteh nicht wirklich den sinn der sache hier
    void displayMetadata(Node root){
        displayMetadata(root, 0);
    }

    //this just prints a few spaces between the outputs
    void intend(int level){
        for (int i = 0; i < level; i++){
            System.out.print("    ");
        }
    }

    void displayMetadata(Node node, int level){
        //print open tag of element
        intend(level);
        System.out.print("<" + node.getNodeName());
        NamedNodeMap map = node.getAttributes();

        if (map != null){

            //print attribute values
            int length = map.getLength();
            for (int i = 0; i < length; i++){
                Node attr = map.item(i);
                System.out.print(" "+attr.getNodeName() + "=\""+attr.getNodeValue() + "\"" );
            }
        }

        Node child = node.getFirstChild();
        if (child == null){
            //no children, so close element and return
            System.out.println("/>");
            return;
        }

        System.out.println(">");
        while (child != null){
            //print children recursively
            displayMetadata(child, level + 1);
            child = child.getNextSibling();
        }

        //print close tag of element
        intend(level);
        System.out.println("</" + node.getNodeName() + ">");
    }